type List(a) = a Until Unit

def countdown n:Nat = 
    primrec n with 
        | 0 => # now () : List(Nat)
        | suc x, rest => # wait n @(?rest)  


//countdown for n in after # stoken is very difficult!
def delayUntil # x:List(Nat) =
    urec x with 
        |now _ => fun n:Nat => wait n @(now () :List(Nat))
        |wait v _ , rest => fun n:Nat => wait n @(<rest v)  

import Modality.Stream
def countdown' # n:Nat= 
    primrec n with 
        | 0 => now ():List(Nat) 
        | suc x, rest => ?delayUntil rest (suc x)

def main # = ?countdown' 4