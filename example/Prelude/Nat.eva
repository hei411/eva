let add # x:Nat y:Nat = 
    primrec x with 
        | 0 => y
        | suc z fby rest => suc rest 

let mult = 
#(fun (x:Nat) (y: Nat) => 
    primrec x with 
        | 0 => 0
        | suc z fby rest => ?add y rest )


let exp # x:Nat y:Nat = 
    primrec y with 
        | 0 => 1
        | suc z fby rest => ?mult x rest

let pred # x:Nat = 
    primrec x with
        |0=> 0
        |suc y fby rest => y

let subt # x:Nat y:Nat = 
    primrec y with 
        | 0=> x
        | suc z fby rest => ?pred rest