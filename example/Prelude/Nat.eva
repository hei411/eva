def add # x:Nat y:Nat = 
    primrec x with 
        | 0 => y
        | suc _, rest => suc rest 


def mult = 
#(fun (x:Nat) (y: Nat) => 
    primrec x with 
        | 0 => 0
        | suc _, rest => ?add y rest )


def exp # x:Nat y:Nat = 
    primrec y with 
        | 0 => 1
        | suc _, rest => ?mult x rest

def pred # x:Nat = 
    primrec x with
        |0=> 0
        |suc y, _ => y

def minus # x:Nat y:Nat = 
    x-y
    /*primrec y with 
        | 0=> x
        | suc z, rest => ?pred rest*/

import Prelude.Bool

def isZero # x:Nat = 
    x==0

def equalsNat # x:Nat y:Nat =
    ?isZero (?add (?minus x y) (?minus y x))

def rem # x:Nat y:Nat = 
    primrec x with 
        | 0 => 0
        | suc _, rest => 
            if ((?pred y) == rest)
                then 0
                else (suc rest) 

def div # x:Nat y:Nat = 
    if (?isZero y) then 0
    else primrec x with 
        | 0=> 0
        | suc m, rest => 
            if  (?rem m y) == (?pred y)
              then  (suc rest)
              else  rest

def lessthan # x:Nat y:Nat = 
    ?isZero (?minus (suc x) y)

def leq #x:Nat y:Nat = 
    ?isZero (?minus x y)

def divisible # x:Nat y:Nat = 
    ?isZero (?rem x y)

def prime #x:Nat = 
    if (?leq x 1)
      then   false 
      else  (primrec x with 
            | 0=> true 
            | suc m, rest => 
                 rest and
                    ((?equalsNat (suc m) 1) or
                        ( (?equalsNat (suc m) x) or
                            (not (?divisible x (suc m)))
                        )
                    )
        )



def min #x:Nat y:Nat = 
    if  (?leq x y)
    then     x
    else     y

def max #x:Nat y:Nat =
    if (?leq x y)
      then y 
       else x

def gcd # x:Nat y:Nat =
    primrec (?min x y) with 
        |0=> 0
        |suc m, rest =>
            if (?divisible x (suc m)) and (?divisible y (suc m))
             then   (suc m)
             else   rest

def lcm # x:Nat y:Nat = 
    ?div (?mult x y) (?gcd x y)
    
def log # base:Nat x:Nat = 
    let f = (fun  ans:Nat b:Nat n:Nat => 
                let right =  b ^(suc ans) in 
                let boolean = ?lessthan (suc n) right in 
                if boolean then ans else (suc ans) 
            ) in 
    primrec x with 
        | 0 => 0 
        | suc n, rest => 
            f rest base n

def root# a:Nat = 
    primrec a with 
        | 0 => 
            let squared = ?mult a a in  
            if (?lessthan a squared)
              then  (?pred a)
              else  a 
        | suc x, rest => 
            let tryNum = ?minus  a (suc x) in 
            let squared = ?mult tryNum tryNum in 
            if ?lessthan a squared
              then  (?pred tryNum)
              else  rest 
                