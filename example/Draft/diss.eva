def add # x:Nat y:Nat = 
    primrec x with 
        | 0 => y
        | suc _ , rest => suc rest 


/*def mult = 
(fun (x:Nat) (y: Nat) => 
    primrec x with 
        | 0 => 0
        | suc _, rest => add y rest )


def exp  x:Nat y:Nat = 
    primrec y with 
        | 0 => 1
        | suc _, rest => mult x rest

def main = 6 `exp` 6*/


import Prelude.List

def num = 27
def l = primrec num with 
    | 0 => []:List(Nat)
    | suc x, rest => ((x)*53+2)%num::rest

//def generated = #[3, 36, 69, 2, 35, 68, 1, 34, 67, 0, 33, 66, 99, 32, 65, 98, 31, 64, 97, 30, 63, 96, 29, 62, 95, 28, 61, 94, 27, 60, 93, 26]
def generated = #l

def main #= 
    let lis = [15,
22] in 
wait lis @( now (?quickSort lis):List(Nat) Until List(Nat))

import Modality.Stream as MS
type Stream = MS.Str(Nat)

/*def fibHelper = 
    nfix repeat: # (Nat->Nat-> Stream) =>
        fun x:Nat y:Nat =>
            let sum =  x `?add` y in 
            let rest = > (<?repeat y sum) in 
            sum:::rest

def fib # = ?fibHelper 0 1

def main = fib*/