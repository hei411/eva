
import Modality.Stream as MS
type Stream = MS.Str(Nat)

import Prelude.Nat

def hd = MS.hdStr{Nat}
def tl = MS.tlStr{Nat}
def cons = MS.conStr{Nat}

def fibHelper = 
    nfix repeat: # (Nat->Nat-> Stream) =>
        fun x:Nat y:Nat =>
            let sum =  x + y in 
            let rest = > (<?repeat y sum) in 
            ?cons x rest 


def main # = ?fibHelper 0 1
def delayStream = MS.delayStr {Nat}

def addStream = 
    nfix repeat:# (Stream->Stream->Stream) => 
        fun one:Stream two:Stream =>
            let onehd=?hd one in 
            let twohd=?hd two in 
            let onetl=?tl one in 
            let twotl=?tl two in 
            ?cons (onehd + twohd) >(<?repeat <onetl <twotl)

def fibHelperLeaky = 
    nfix repeat: #Stream => 
        let delayedOnce = ?repeat in
        let delayedTwice = > (?delayStream 0 <?repeat) in
        ?cons 1 >(?addStream <delayedOnce <delayedTwice) 

//def main = MS.natStr//fibHelperLeaky

//Streams
//type Stream = Fix a --> Nat*a
//def tl  (s: Stream) = snd (out s)

//Box
//def accessData1 (x:Stream) # = x 
//def accessData2 (x:#Stream)  # = ?x


//> and @
//def atToAngle{a} # x:@a  = > < x
//def angleToAt{ a} # x:>a = @<x

//def main # x:Stream = wait () (@now 0:Unit Until Nat)