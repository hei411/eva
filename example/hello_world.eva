//let two_test = 2;
let test [a,b] f:a->b x:a=f x;
let test2 = test [Nat,Unit];
let inlInsert [ a,b] # (var:a) = inl var :a+b;
type Nattest (f,e) = Nat;
type Weird(e,g) = e*(g+g);
//import ervrev.erg.erv;
/*
type Kef(s, b) = Nat;
type K = Unit;

let zero = 0;
let zero2 = zero;
let function = fun (k): Nat => suc suc 0;
let intofun = into 0 : Fix a ->Nat;
let inlfun = inl(0) : Nat + Unit;
//This is a comment

let q = fix e : # Fix a -> Nat + a => into(inr(unbox e)
                                             : (Nat + > Fix a->Nat + a)) : Fix a->Nat
                                            + a;

let primrectry =  fun x : Nat => primrec (x )with
                               | 0 => 0 
                               | suc k fby t => t;

let urectry =#fun x : Nat Until Nat => urec(x) with
                                         | now x => suc 0 | wait x y fby z => 0;

let embed = # fun x : @Nat  => > (adv x);
/*Comment block
heya
*/