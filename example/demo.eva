//Streams
type Stream = Fix a --> Nat*a
//def tl  (s: Stream) = snd (out s)
import Prelude.Nat 

import Modality.Stream 
def main  # = ?constantStr[Nat] 0 
//Box
//def accessData1 (x:Stream) # = x 
//def accessData2 (x:#Stream)  # = ?x

//> and @
//def atToAngle[a] # x:@a  = > < x
//def angleToAt[a] # x:>a = @<x


/*
//Demo code
import stdlib.typedef.commonprimitives  
//type Test = Str(Nat)
/*
import stdlib.functions.natfunctions as nf 
def h = nf.add


def f1[a] # x:@a  = > (< x)
def f2[Limit a] # (x:>a) = @<x

def legal[Stable aa,t2] x:aa # y:t2 =x
/*
//def illegal [a] = legal[Str(a)]
//def now_legal =legal [Unit]
def f1[a] # x:@a  = > < x
def f2 [a] # x:>a = @<x
*/

/*
def correct_f2 # x:>Nat = ?f2 [Nat] x
//def cheeky_f2 [a,b] # x:>(a Until b) = ?f2 [a Until b] x 

*/