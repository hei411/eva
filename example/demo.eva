//Demo code
import stdlib.typedef.commonprimitives  
//type Test = Str(Nat)
/*
import stdlib.functions.natfunctions as nf 
let h = nf.add

*/
let f1[a] # x:@a  = > (< x)
let f2[Limit a] # (x:>a) = @<x

let legal[Stable aa,t2] x:aa # y:t2 =x
/*
//let illegal [a] = legal[Str(a)]
//let now_legal =legal [Unit]
let f1[a] # x:@a  = > < x
let f2 [a] # x:>a = @<x
*/

/*
let correct_f2 # x:>Nat = ?f2 [Nat] x
//let cheeky_f2 [a,b] # x:>(a Until b) = ?f2 [a Until b] x 

*/