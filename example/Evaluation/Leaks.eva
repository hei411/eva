import Prelude.Bool 
import Prelude.Nat 
import Modality.Stream

//bad const from Neel's paper 
def bad_const [Stable a]= 
    rec loop: #(Str(a)->Str(Str(a))) => 
        fun ns:Str(a) => 
            let hd= ?hdStr[a] ns in 
            let delayed = ?delayStr[a] hd ns in 
            ?conStr[Str(a)] ns >(<?loop <(?tlStr[a] delayed))

/*
//For debugging bad const
def takeStr = 
    rec loop: #(Nat -> Str(Str(Nat)) -> Str(Nat)) => 
        fun n:Nat s:Str(Str(Nat))=>
            ?if[Str(Nat)] (?isZero n)
                (?hdStr[Str(Nat)] s) 
                (?conStr[Nat] 0 >(<?loop (?pred n) <(?tlStr[Str(Nat)] s)))

def main # s :Str(Nat) = 
    ?takeStr  3 (?bad_const[Nat] s)

*/
